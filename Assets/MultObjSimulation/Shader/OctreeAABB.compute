
struct PairIndex
{
    uint i1;
    uint i2;
};

struct BoundingBox
{
    float3 min;
    float3 max;
};

struct OctreeData
{
    float3 min;
    float3 max;
    float3 center;
    float3 size;
    uint index;
};

struct Tri
{
    float3 vertex0;
    float3 vertex1;
    float3 vertex2;
};

struct Line {
    float3 p0;
    float3 p1;
    
    // float3 direction() {
    //     return normalize(p1 - p0);
    // }
    
    // float3 origin() {
    //     return p0;
    // }

    float3 direction;
    float3 origin;
};

// variable
uint numberObj;
uint nodeCount;
uint triCount;
uint objectIndex;
bool debug;

float3 hitPoint;
#define Epsilon 0.00001

// Bind Positions
RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> globalPositions;

// Bind Tri-Position
RWStructuredBuffer<Tri> posTriangles;
RWStructuredBuffer<Tri> globalPosTriangles;

// floor min and max
RWStructuredBuffer<float3> floorPositions;
RWStructuredBuffer<BoundingBox> floorBB;

// BB min and max
RWStructuredBuffer<BoundingBox> bbMinMax;
RWStructuredBuffer<int2> rangeObjIndex;

// Tri-Intersection
RWStructuredBuffer<PairIndex> pairIndexL1;
RWStructuredBuffer<uint> collisionResults;
RWStructuredBuffer<uint> collisionResultTri1;
RWStructuredBuffer<uint> collisionResultTri2;

// 
RWStructuredBuffer<PairIndex> pairIndexTri;

// Octree Data
RWStructuredBuffer<OctreeData> bbOctree;

/////////////////////////////////////////////////
//  Bind Global Positions kernel
/////////////////////////////////////////////////
#pragma kernel BindGlobalPositions

[numthreads(1024, 1, 1)]
void BindGlobalPositions(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= nodeCount) return;

    globalPositions[nodeCount * objectIndex + idx] = positions[idx];

}

/////////////////////////////////////////////////
//  Bind Global Position Triangles kernel
/////////////////////////////////////////////////
#pragma kernel BindGlobalPosTriangles

[numthreads(1024, 1, 1)]
void BindGlobalPosTriangles(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= triCount) return;

    globalPosTriangles[triCount * objectIndex + idx] = posTriangles[idx];

}


///////////////////////////////////////////////////
////  Find BB Min & Max kernel
///////////////////////////////////////////////////
#pragma kernel FindBBMinMax

[numthreads(1024, 1, 1)]
void FindBBMinMax(uint3 id : SV_DispatchThreadID)
{
   uint idx = id.x;

    if (idx >= numberObj) return;

    uint start = rangeObjIndex[idx].x;
    uint end = rangeObjIndex[idx].y;

    float3 min_value = globalPositions[start];
    float3 max_value = globalPositions[start];

    for (int i = start; i < end; i++)
    {
        float3 vertex = globalPositions[i];

        min_value = min(min_value, vertex); // 최소값 업데이트
        max_value = max(max_value, vertex); // 최대값 업데이트
    }

    bbMinMax[idx].min = min_value;
    bbMinMax[idx].max = max_value;

}

///////////////////////////////////////////////////
////  Initialize Octree kernel
///////////////////////////////////////////////////
#pragma kernel ImplementOctree

[numthreads(1024, 1, 1)]
void ImplementOctree(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if (idx >= numberObj ) return;

    // Lv0, Initialize Lv0 
    bbOctree[idx * 9].center = (bbMinMax[idx].max + bbMinMax[idx].min) / 2;
    bbOctree[idx * 9].size = bbMinMax[idx].max - bbMinMax[idx].min;

    bbOctree[idx * 9].min = bbMinMax[idx].min; // min value Lv0
    bbOctree[idx * 9].max = bbMinMax[idx].max; // max value Lv0

    float3 center = bbOctree[idx * 9].center;
    float3 size = bbOctree[idx * 9].size;

    // Lv1, Split to 8 children
    bbOctree[idx * 9 + 1].center.x = center.x - (size.x / 4);
    bbOctree[idx * 9 + 1].center.y = center.y + (size.y / 4);
    bbOctree[idx * 9 + 1].center.z = center.z - (size.z / 4);

    bbOctree[idx * 9 + 2].center.x = center.x + (size.x / 4);
    bbOctree[idx * 9 + 2].center.y = center.y + (size.y / 4);
    bbOctree[idx * 9 + 2].center.z = center.z - (size.z / 4);

    bbOctree[idx * 9 + 3].center.x = center.x - (size.x / 4);
    bbOctree[idx * 9 + 3].center.y = center.y - (size.y / 4);
    bbOctree[idx * 9 + 3].center.z = center.z - (size.z / 4);

    bbOctree[idx * 9 + 4].center.x = center.x + (size.x / 4);
    bbOctree[idx * 9 + 4].center.y = center.y - (size.y / 4);
    bbOctree[idx * 9 + 4].center.z = center.z - (size.z / 4);

    bbOctree[idx * 9 + 5].center.x = center.x - (size.x / 4);
    bbOctree[idx * 9 + 5].center.y = center.y + (size.y / 4);
    bbOctree[idx * 9 + 5].center.z = center.z + (size.z / 4);

    bbOctree[idx * 9 + 6].center.x = center.x + (size.x / 4);
    bbOctree[idx * 9 + 6].center.y = center.y + (size.y / 4);
    bbOctree[idx * 9 + 6].center.z = center.z + (size.z / 4);

    bbOctree[idx * 9 + 7].center.x = center.x - (size.x / 4);
    bbOctree[idx * 9 + 7].center.y = center.y - (size.y / 4);
    bbOctree[idx * 9 + 7].center.z = center.z + (size.z / 4);

    bbOctree[idx * 9 + 8].center.x = center.x + (size.x / 4);
    bbOctree[idx * 9 + 8].center.y = center.y - (size.y / 4);
    bbOctree[idx * 9 + 8].center.z = center.z + (size.z / 4);
    
    //float3 sizeBB = bbOctree[idx * 9].size;
    float3 sizeBB = size;
    for (int j = 1; j <= 8; j++)
    {
        // Lv1, min and max
        bbOctree[idx * 9 + j].min.x = bbOctree[idx * 9 + j].center.x - (bbOctree[idx * 9].size.x / 4);
        bbOctree[idx * 9 + j].min.y = bbOctree[idx * 9 + j].center.y - (bbOctree[idx * 9].size.y / 4);
        bbOctree[idx * 9 + j].min.z = bbOctree[idx * 9 + j].center.z - (bbOctree[idx * 9].size.z / 4);
 
        bbOctree[idx * 9 + j].max.x = bbOctree[idx * 9 + j].center.x + (bbOctree[idx * 9].size.x / 4);
        bbOctree[idx * 9 + j].max.y = bbOctree[idx * 9 + j].center.y + (bbOctree[idx * 9].size.y / 4);
        bbOctree[idx * 9 + j].max.z = bbOctree[idx * 9 + j].center.z + (bbOctree[idx * 9].size.z / 4);
    }
}

///////////// Tri-Intersection function ////////////
float3 ProjectPointOnPlane(float3 p, float3 planeNormal, float3 planePoint)
{
    float d = dot(planeNormal, (p - planePoint)) / length(planeNormal) ;
    return p - d * planeNormal;
}

bool IsPointInsideTriangle(float3 p, Tri tri)
{
    float3 normal = normalize(cross(tri.vertex1 - tri.vertex0, tri.vertex2 - tri.vertex0));

    // ���� �ﰢ�� ��鿡 ����
    float3 projectedPoint = ProjectPointOnPlane(p, normal, tri.vertex0);

    //if (distance(projectedPoint, p) > 0.1) return false;
    if (distance(projectedPoint, p) > 0.01) return false;

    // ������ ���� ���� ���� �Ǵ� ����
    float3 edge1 = tri.vertex1 - tri.vertex0;
    float3 vp1 = projectedPoint - tri.vertex0;
    if (dot(cross(edge1, vp1), normal) < 0) return false;

    float3 edge2 = tri.vertex2 - tri.vertex1;
    float3 vp2 = projectedPoint - tri.vertex1;
    if (dot(cross(edge2, vp2), normal) < 0) return false;

    float3 edge3 = tri.vertex0 - tri.vertex2;
    float3 vp3 = projectedPoint - tri.vertex2;
    if (dot(cross(edge3, vp3), normal) < 0) return false;

    return true; // ��� �˻縦 ����ߴٸ�, ������ ���� �ﰢ�� ���ο� �ֽ��ϴ�.
}

bool Intersect(Tri tri, Line ray, float3 hit)
{
    // Vectors from p1 to p2/p3 (edges)
    //Find vectors for edges sharing vertex/point p1
    float3 e1 = tri.vertex1 - tri.vertex0;
    float3 e2 = tri.vertex2 - tri.vertex0;

    ray.direction = normalize(ray.p1 - ray.p0);
    float3 p = cross(ray.direction, e2);

    //Calculate determinat
    float det = dot(e1, p);

    //if determinant is near zero, ray lies in plane of triangle otherwise not
    //if (det > -Mathf.Epsilon && det < Mathf.Epsilon)
    if (det > -Epsilon && det < Epsilon)
    {
        bool coplanar = IsPointInsideTriangle(ray.p0, tri);
        bool coplanar2 = IsPointInsideTriangle(ray.p1, tri);

        if (coplanar) hit = ray.p0;
        if (coplanar2) hit = ray.p1;

        return coplanar || coplanar2;
    }
    float invDet = 1.0f / det;

    //calculate distance from p1 to ray origin
    ray.origin = ray.p0;
    float3 t = ray.origin - tri.vertex0;

    //Calculate u parameter
    float u = dot(t, p) * invDet;

    //Check for ray hit
    if (u < 0 || u > 1) { return false; }

    //Prepare to test v parameter
    float3 q = cross(t, e1);

    //Calculate v parameter
    float v = dot(ray.direction, q) * invDet;

    //Check for ray hit
    if (v < 0 || u + v > 1) { return false; }

    // intersection point
    hit = tri.vertex0 + u * e1 + v * e2;

    if ((dot(e2, q) * invDet) > Epsilon)
    {
        //ray does intersect            
        return true;
    }

    // No hit at all
    return false;
}

bool CheckEdgeCollision(float3 vertex1, float3 vertex2, Tri t)
{
    //var edge = new Line();
    // Instantiate a Line struct
    Line edge;

    edge.p0 = vertex1;
    edge.p1 = vertex2;

    return Intersect(t, edge,  hitPoint);
}

bool Detection(Tri t1, Tri t2)
{
    bool c1 = 
    CheckEdgeCollision(t1.vertex0, t1.vertex1, t2) || 
    CheckEdgeCollision(t1.vertex0, t1.vertex2, t2) || 
    CheckEdgeCollision(t1.vertex1, t1.vertex2, t2);

    bool c2 = 
    CheckEdgeCollision(t2.vertex0, t2.vertex1, t1) || 
    CheckEdgeCollision(t2.vertex0, t2.vertex2, t1) || 
    CheckEdgeCollision(t2.vertex1, t2.vertex2, t1);

    return c1 && c2;
}

int calcIndexObjectLevel0(int object_index)
{
    return floor(float(object_index) / 9.0f) * 9;
}

///////////////////////////////////////////////////
////  Tri-Intersection kernel
///////////////////////////////////////////////////
#pragma kernel TriIntersection

[numthreads(32, 32, 1)]
void TriIntersection(uint3 id : SV_DispatchThreadID)
{
   uint i = id.x;
   uint j = id.y;

   int objIndex1 = floor(float(i) / triCount);
   int objIndex2 = floor(float(j) / triCount);
   
   if(objIndex1 != objIndex2 && objIndex1 >= objIndex2)
   {
        // check collision box of object, before check tri-intersection
        for (int p = 0; p < pairIndexL1.Length; p++)
        {
            PairIndex pair = pairIndexL1[p];
            uint i1 = pair.i1;
            uint i2 = pair.i2;

            uint l0_index_obj1 = calcIndexObjectLevel0(i1);
            uint l0_index_obj2 = calcIndexObjectLevel0(i2);
        
            // create Lv0 obj
            OctreeData l0_obj1 = bbOctree[l0_index_obj1];
            OctreeData l0_obj2 = bbOctree[l0_index_obj2];
            // update pair index of octree by i1, i2
            bbOctree[l0_index_obj1].index = l0_index_obj1; 
            bbOctree[l0_index_obj2].index = l0_index_obj2;

            // create Lv1 obj
            OctreeData b1 = bbOctree[i1];
            OctreeData b2 = bbOctree[i2];
            bbOctree[i1].index = i1; 
            bbOctree[i2].index = i2; 

            if ((
                l0_obj1.min.x <= l0_obj2.max.x &&
                l0_obj1.max.x >= l0_obj2.min.x &&
                l0_obj1.min.y <= l0_obj2.max.y &&
                l0_obj1.max.y >= l0_obj2.min.y &&
                l0_obj1.min.z <= l0_obj2.max.z &&
                l0_obj1.max.z >= l0_obj2.min.z))
                {
                    if(debug)
                    {
                        collisionResults[bbOctree[l0_index_obj1].index] = 1;
                        collisionResults[bbOctree[l0_index_obj2].index] = 1;
                    }
                }
        
            
            bool collideLv1 =
                b1.min.x <= b2.max.x &&
                b1.max.x >= b2.min.x &&
                b1.min.y <= b2.max.y &&
                b1.max.y >= b2.min.y &&
                b1.min.z <= b2.max.z &&
                b1.max.z >= b2.min.z;
                
            
            if (collideLv1)
            {
                if(debug)
                {
                    collisionResults[bbOctree[i1].index] = 1;
                    collisionResults[bbOctree[i2].index] = 1;
                }

                Tri t1 = globalPosTriangles[i];
                Tri t2 = globalPosTriangles[j];
        
                if(Detection(t1, t2))
                {                    
                    collisionResultTri1[i] = 1;
                    collisionResultTri2[j] = 1;
                }
            }
        }    
   }
}

#pragma kernel RemoveCollisionResults

[numthreads(1024, 1, 1)]
void RemoveCollisionResults(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    if(idx >= numberObj * 9) return;
    collisionResults[idx] = 0;
}


//////////////////////////////////////////////////
////  Remove Tri-Intersection kernel
///////////////////////////////////////////////////
#pragma kernel RemoveTriKernel

[numthreads(1024, 1, 1)]
void RemoveTriKernel(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= triCount * numberObj) return;

   collisionResultTri1[id.x] = 0;
   collisionResultTri2[id.x] = 0;
}